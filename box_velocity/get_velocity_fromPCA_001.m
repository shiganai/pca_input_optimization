function velocity = get_velocity_fromPCA_001(pcaScore_ratio, row_num, col_num)
% Para.velocity_variety = -1.0000   -0.5000         0    0.5000    1.0000
% Para.evaluating_time = 0:1e-2:5;
% target_vm = Para.velocity_matrix_NaN
% target_vm = unique(target_vm, 'rows');


coeff_vm = [
   -0.1200   -0.0350    0.0651   -0.0430   -0.0478    0.0195    0.7676    0.0970    0.6091   -0.0776
   -0.3075   -0.0954    0.0654   -0.1367   -0.1668    0.5917   -0.4939    0.0170    0.4948   -0.0796
   -0.1071   -0.0357   -0.0701    0.1910    0.6358   -0.4771   -0.3175    0.0899    0.4312   -0.1383
    0.5546    0.1845   -0.3892   -0.2600   -0.4263   -0.2774   -0.1865   -0.0138    0.3318   -0.1884
    0.3128    0.1011    0.6632    0.5366   -0.2133   -0.0455   -0.0896   -0.2366    0.1474   -0.1754
    0.0405   -0.4080    0.1301   -0.2182   -0.0564   -0.2314   -0.0568   -0.4971    0.1918    0.6507
   -0.0881    0.7564   -0.1873    0.2517    0.0443    0.1150   -0.0016   -0.1040    0.1489    0.5229
    0.5349   -0.3523   -0.1899    0.3524    0.1734    0.3508    0.0201    0.4029    0.0847    0.3264
    0.1673    0.2392    0.5526   -0.4998    0.1090   -0.0883   -0.0847    0.5283    0.0158    0.2311
   -0.3880   -0.1553   -0.0416    0.3201   -0.5397   -0.3811   -0.1114    0.4761    0.0033    0.2131
   ];

mu_vm = [
    -0.8131   -0.7578   -0.6367   -0.3381   -0.2151    0.5000    0.1211    0.3997    0.4734    0.4946
    ];

pcaScore_ratio = reshape(pcaScore_ratio, 1, 10);

pcaScore_max = sum(abs(coeff_vm),1);
pcaScore = pcaScore_max .* pcaScore_ratio;

velocity = pcaScore * coeff_vm' + mu_vm;
velocity = reshape(velocity, row_num, col_num);

velocity(velocity > 1) = 1;
velocity(velocity < -1) = -1;

end

